// threads.h
// Date Created: 2023-07-26
// Date Updated: 2023-07-26
// Threads

#ifndef THREADS_H_
#define THREADS_H_

/************************************Includes***************************************/

#include <G8RTOS/G8RTOS.h>

/************************************Includes***************************************/

/*************************************Defines***************************************/
#define JOYSTICK_FIFO       0

typedef enum GameState {
   START,
   GAMEPLAY,
   LEVELWON,
   GAMEOVER
} GameState;

typedef enum {
   FLAT,
   SLOPE_RIGHT_DOWN,
   SLOPE_LEFT_DOWN
} PlatformType;

typedef struct {
   uint8_t x;         // starting x position
   uint8_t y;         // starting y position
   uint8_t width;     // width of platform
   uint8_t height;    // height/thickness of platform
   uint16_t slope;     // slope percentage (0 for flat)
   PlatformType type;  // type of platform
   uint16_t color;     // color of platform
} Platform;

typedef struct {
   uint16_t x;          // x position
   uint16_t y_bottom;   // bottom y position
   uint16_t y_top;      // top y position
   uint8_t lower_platform, upper_platform; // indices of platforms
   uint16_t width;      // width of ladder
   uint16_t rung_space; // space between rungs
   bool is_broken;      // whether ladder is broken (can't be climbed)
   uint16_t color;      // color of ladder
} Ladder;

typedef struct {
    int16_t x;
    int16_t y;
    int8_t dir;
    bool active;  // whether barrel is currently in play
    bool falling;
    uint8_t platform_index;  // which platform the barrel is currently on
    int16_t err;
    bool jumped;
} Barrel;


#define MARIO_SPRITE_HEIGHT 13
#define MARIO_SPRITE_WIDTH 10

// array size is 260
static uint16_t mario_right_sprite[]  = {
  0x0000, 0x09da, 0x01bc, 0x01be, 0x01be, 0x01bd, 0x01dc, 0x09bc, 0x0999, 0x0000, 
  0x0000, 0x48f0, 0x5112, 0x5112, 0x5132, 0x4b7c, 0x3b5d, 0x01bd, 0x11da, 0x0000, 
  0x9000, 0xa9a7, 0xbc54, 0xb925, 0xbb70, 0xb599, 0xb2cd, 0xb65c, 0xb67d, 0xbe7d, 
  0xa000, 0xb9e8, 0xb67d, 0xb1c8, 0xb0e4, 0xb5da, 0xbc95, 0xaaed, 0xb67d, 0xb67d, 
  0xa800, 0xb021, 0xb3b1, 0xb61c, 0xb5fb, 0xb599, 0xb145, 0xb904, 0xb0e4, 0x99a8, 
  0x9000, 0x8800, 0xb2ec, 0xb433, 0xb433, 0xb433, 0xb454, 0xb5fc, 0xad57, 0x8000, 
  0x9000, 0xb000, 0xb800, 0xb800, 0x70ac, 0x70cc, 0xb000, 0x9000, 0x0000, 0x0000, 
  0xa000, 0xb800, 0xb800, 0x60ce, 0x11dc, 0x5bbb, 0x4134, 0x3912, 0x001f, 0x0000, 
  0x9022, 0xb022, 0xb841, 0x41b6, 0x121e, 0x123e, 0x01be, 0x01be, 0x09db, 0x0000, 
  0x09bc, 0x3156, 0xab50, 0xb67d, 0x95de, 0x123e, 0x01df, 0x01bf, 0x01bc, 0x0000, 
  0x09bc, 0x01be, 0x3b5d, 0x74fe, 0x2add, 0x01be, 0x01bf, 0x01dd, 0x09bb, 0x0000, 
  0x608b, 0x68ac, 0x70ac, 0x3134, 0x2933, 0x68ac, 0x70ac, 0x60ab, 0x0000, 0x0000, 
  0x9800, 0xb800, 0xb800, 0xb000, 0x9000, 0xb000, 0xb800, 0xb000, 0x9000, 0x0000
};

static uint16_t mario_left_sprite[] = {
  0x0000, 0x0999, 0x09bc, 0x01dc, 0x01bd, 0x01be, 0x01be, 0x01bc, 0x09da, 0x0000, 
  0x0000, 0x11da, 0x01bd, 0x3b5d, 0x4b7c, 0x5132, 0x5112, 0x5112, 0x48f0, 0x0000, 
  0xbe7d, 0xb67d, 0xb65c, 0xb2cd, 0xb599, 0xbb70, 0xb925, 0xbc54, 0xa9a7, 0x9000, 
  0xb67d, 0xb67d, 0xaaed, 0xbc95, 0xb5da, 0xb0e4, 0xb1c8, 0xb67d, 0xb9e8, 0xa000, 
  0x99a8, 0xb0e4, 0xb904, 0xb145, 0xb599, 0xb5fb, 0xb61c, 0xb3b1, 0xb021, 0xa800, 
  0x8000, 0xad57, 0xb5fc, 0xb454, 0xb433, 0xb433, 0xb433, 0xb2ec, 0x8800, 0x9000, 
  0x0000, 0x0000, 0x9000, 0xb000, 0x70cc, 0x70ac, 0xb800, 0xb800, 0xb000, 0x9000, 
  0x0000, 0x001f, 0x3912, 0x4134, 0x5bbb, 0x11dc, 0x60ce, 0xb800, 0xb800, 0xa000, 
  0x0000, 0x09db, 0x01be, 0x01be, 0x123e, 0x121e, 0x41b6, 0xb841, 0xb022, 0x9022, 
  0x0000, 0x01bc, 0x01bf, 0x01df, 0x123e, 0x95de, 0xb67d, 0xab50, 0x3156, 0x09bc, 
  0x0000, 0x09bb, 0x01dd, 0x01bf, 0x01be, 0x2add, 0x74fe, 0x3b5d, 0x01be, 0x09bc, 
  0x0000, 0x0000, 0x60ab, 0x70ac, 0x68ac, 0x2933, 0x3134, 0x70ac, 0x68ac, 0x608b, 
  0x0000, 0x9000, 0xb000, 0xb800, 0xb000, 0x9000, 0xb000, 0xb800, 0xb800, 0x9800
};


#define DK_SPRITE_HEIGHT 16
#define DK_SPRITE_WIDTH 20

// array size is 640
static const uint16_t dk_sprite[]  = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0023, 0x2151, 0x29b7, 0x2156, 0x31d7, 0x10aa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0862, 0x0864, 0x2993, 0x74dc, 0x7cfc, 0x5bda, 0x85bd, 0x4b58, 0x18eb, 0x0862, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x10a3, 0x6477, 0x42b7, 0x3a58, 0x8dde, 0x9d78, 0x63f3, 0x9e1d, 0x6c9c, 0x4b18, 0x6497, 0x10a3, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0001, 0x0845, 0x2150, 0x5379, 0x6cbc, 0x647c, 0x85de, 0x74dc, 0x5bb9, 0x85bd, 0x7d5d, 0x6cdc, 0x5379, 0x1930, 0x0845, 0x0001, 0x0000, 0x0000, 
  0x0000, 0x0023, 0x088a, 0x2136, 0x2176, 0x539a, 0x85fe, 0x6cdc, 0x647b, 0x643b, 0x643b, 0x645b, 0x6c7c, 0x7d9d, 0x4b5a, 0x2156, 0x2136, 0x10ad, 0x0024, 0x0000, 
  0x0024, 0x18f2, 0x2136, 0x2136, 0x2156, 0x3a98, 0x751c, 0x751d, 0x85be, 0x85be, 0x85be, 0x85be, 0x7d9e, 0x647b, 0x3a98, 0x2156, 0x2136, 0x2137, 0x18f3, 0x0024, 
  0x10cd, 0x2136, 0x2136, 0x2138, 0x2137, 0x2156, 0x3a98, 0x6cdc, 0x85de, 0x85de, 0x85de, 0x85de, 0x85be, 0x4b19, 0x2997, 0x2158, 0x2138, 0x2136, 0x2136, 0x10ad, 
  0x10ce, 0x2136, 0x2136, 0x2137, 0x2159, 0x2159, 0x4b19, 0x5bfb, 0x29b7, 0x2176, 0x2176, 0x29b7, 0x5bfb, 0x42f9, 0x2159, 0x2159, 0x2137, 0x2136, 0x2136, 0x10ce, 
  0x0023, 0x18f1, 0x2136, 0x2136, 0x2136, 0x2156, 0x4b39, 0x6cdc, 0x7d9e, 0x42bb, 0x42db, 0x7d9e, 0x6cdc, 0x4b19, 0x2156, 0x2136, 0x2136, 0x2136, 0x18f1, 0x0023, 
  0x0000, 0x0022, 0x10ac, 0x1912, 0x2136, 0x2157, 0x29d7, 0x5c1b, 0x85de, 0x5c1d, 0x645d, 0x85de, 0x5c1b, 0x29d7, 0x2157, 0x2136, 0x1912, 0x10ac, 0x0022, 0x0000, 
  0x0000, 0x0000, 0x0023, 0x1913, 0x2136, 0x2158, 0x3a5a, 0x4b3c, 0x53bc, 0x74fd, 0x74dd, 0x53bc, 0x4b3c, 0x323a, 0x2158, 0x2136, 0x1914, 0x0023, 0x0000, 0x0000, 
  0x0000, 0x0023, 0x18f2, 0x2136, 0x2136, 0x2136, 0x2157, 0x539c, 0x5c1d, 0x6c9d, 0x647d, 0x5bfc, 0x539c, 0x2157, 0x2136, 0x2136, 0x2136, 0x18f2, 0x0023, 0x0000, 
  0x0000, 0x10ae, 0x2136, 0x2136, 0x2136, 0x2136, 0x2136, 0x29b8, 0x42d8, 0x42d8, 0x3236, 0x3ab8, 0x29b8, 0x2136, 0x2136, 0x2136, 0x2136, 0x2136, 0x10ae, 0x0000, 
  0x0001, 0x10ab, 0x2136, 0x2156, 0x2156, 0x2156, 0x2136, 0x18d0, 0x0023, 0x0022, 0x0022, 0x0023, 0x18cf, 0x2136, 0x2156, 0x2156, 0x2156, 0x2136, 0x10ab, 0x0001, 
  0x08a3, 0x29cd, 0x42f8, 0x2997, 0x3a58, 0x3a78, 0x2190, 0x0021, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x2170, 0x3a98, 0x3a58, 0x29b7, 0x42f8, 0x29cd, 0x08a3, 
  0x4b35, 0x6cdc, 0x6cbc, 0x753d, 0x7d5d, 0x647a, 0x2187, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2187, 0x645a, 0x7d5d, 0x753d, 0x6cdc, 0x6cdc, 0x4b35
};

#define PRINCESS_SPRITE_HEIGHT 20
#define PRINCESS_SPRITE_WIDTH 20

// array size is 800
static const uint16_t princess_sprite[]  = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0083, 0x1a70, 0x1a71, 0x1a71, 0x0948, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0063, 0x2bfb, 0x347f, 0x551f, 0x551f, 0x3c19, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x120e, 0x120e, 0x0020, 0x120e, 0x3cbe, 0x655f, 0xf7df, 0x961f, 0xbe18, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x2357, 0x11cc, 0x118a, 0x3c5d, 0xcf1f, 0xffff, 0xf79e, 0x52aa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x1a70, 0x2bfb, 0x2c5e, 0x6b5d, 0xbafd, 0xf79f, 0xbdb7, 0x2945, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x116a, 0x1ad4, 0x1a92, 0x6a16, 0xc9fd, 0xdc1e, 0xcbdc, 0x1843, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x0021, 0x0000, 0x50cc, 0xc9bc, 0xd1dc, 0x9155, 0x2044, 0x18a3, 0x18c3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0801, 0xd0cc, 0xe8ee, 0xc9bc, 0xc9dc, 0xcc5b, 0x4a49, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1843, 0x48aa, 0xb9bb, 0xc9bc, 0xd1bc, 0xd1dd, 0xcb7b, 0x3166, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x1844, 0xa197, 0xde5b, 0xd29d, 0xc9dd, 0xd1dd, 0xd1dd, 0xd1dd, 0xca9c, 0x6b0d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x48aa, 0xdbbd, 0xe51e, 0xdb9e, 0xd1fd, 0xd1dd, 0xd1dd, 0xb9ba, 0x0821, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0800, 0xd198, 0xd23c, 0xee5e, 0xd2fd, 0xd2bd, 0xd1fd, 0xb9ba, 0x0821, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x7021, 0xf063, 0xe0a9, 0x8932, 0xd37d, 0xee5e, 0xedfe, 0xd53b, 0x0821, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0800, 0xc042, 0x6021, 0x0800, 0x1843, 0xb974, 0xd975, 0x8932, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x2000, 0x0000, 0x0000, 0x9042, 0x6822, 0xc043, 0x5821, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0800, 0x0800, 0x1000, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

#define BARREL_SPRITE_HEIGHT 4
#define BARREL_SPRITE_WIDTH 6

// array size is 48
static const uint16_t barrel_sprite[]  = {
  0x0946, 0x1b73, 0x34dc, 0x2cdd, 0x1b73, 0x0926,
  0x2cbb, 0x2c9e, 0x5c78, 0x447a, 0x2c7e, 0x2c9a,
  0x2c9a, 0x6c96, 0x6477, 0x4c7a, 0x5499, 0x2c9a,
  0x0926, 0x3b4f, 0x44fb, 0x2cdd, 0x2351, 0x0926
};
/**********************************Defines***************************************/

/***********************************Semaphores**************************************/

semaphore_t sem_I2CA;
semaphore_t sem_SPIA;
semaphore_t sem_PCA9555_Debounce;
//semaphore_t sem_Joystick_Debounce;
//semaphore_t sem_KillCube;

/***********************************Semaphores**************************************/

/***********************************Structures**************************************/
/***********************************Structures**************************************/


/*******************************Background Threads**********************************/

void Idle_Thread(void);
void MarioMove_Thread(void);
void Read_Buttons(void);

/*******************************Background Threads**********************************/

/********************************Periodic Threads***********************************/

void Get_Joystick(void);
void Draw_Screen(void);
void Generate_Barrel(void);
void Update_Timer(void);

/********************************Periodic Threads***********************************/

/*******************************Aperiodic Threads***********************************/

void GPIOE_Handler(void);
void UART4_Handler(void);

/*******************************Aperiodic Threads***********************************/


#endif /* THREADS_H_ */

